* Copyright 2025 Aleksandr Bocharov
* Distributed under the Boost Software License, Version 1.0.
* See accompanying file LICENSE_1_0.txt
* or copy at http://www.boost.org/LICENSE_1_0.txt
* 2025-10-31
* https://github.com/Aleksandr3Bocharov/refalab

*====================================================================
* Рефал-функции библиотеки РефалАБ.
* Спецификаторы библиотеки РефалАБ.
* Пустые функции библиотеки РефалАБ.
*====================================================================

MO2 START

    ENTRY Cvb, Cvd
    ENTRY White_Spaces, Is_White_Space, Trim, TrimL, TrimR
    ENTRY Exist, Set, Empty, Type, Is_Type
    ENTRY Void, Label, Number, Reference, Latin, Digit, Char, Brackets, OtherT
    EXTRN Numb, Symb, Add, Mul, DrN
    EXTRN True, False
    EMPTY Void, Label, Number, Reference, Latin, Digit, Char, Brackets, OtherT

White_Spaces +
    S   ' \n\t\v\f\r'

    IMPL

Cvb '-' E('0').X +
        = 0
    '-' V(D).X +
        = '-' <Cvb0 V.X>
    '+' = 0
    '+' V(D).X +
        = <Cvb0 V.X>
    E(D).X +
        = <Cvb0 E.X>

Cvb0
    V.X S.D1 S.D2 S.D3 S.D4 S.D5 S.D6 S.D7 S.D8 S.D9 +
        = <Add (<Mul (<Cvb0 V.X>) 1000000000>) +
            <Numb S.D1 S.D2 S.D3 S.D4 S.D5 S.D6 S.D7 S.D8 S.D9>>
    E.X = <Numb E.X>

Cvd '-' E(0).X +
        = '0'
    '-' V(N).X +
        = '-' <Cvd0 V.X>
    '+' = '0'
    '+' V(N).X +
        = <Cvd0 V.X>
    E(N).X +
        = <Cvd0 E.X>

Cvd0 +
    E.X = <Cvd1 <DrN (E.X) 1000000000>>

Cvd1 +
    (E.Y) +
        = <Symb E.Y>
    E.X (E.Y) +
        = <Cvd0 E.X> <Cvd2 <Symb E.Y>>

Cvd2 +
    S.D1 S.D2 S.D3 S.D4 S.D5 S.D6 S.D7 S.D8 S.D9 +
        = S.D1 S.D2 S.D3 S.D4 S.D5 S.D6 S.D7 S.D8 S.D9
    E.X = <Cvd2 '0' E.X>

* <Is_White_Space S.Any> == &True | &False
Is_White_Space
    S(:White_Spaces:)._ +
        = &True
    S._ = &False

* <Trim E.Any> == E.Any′
Trim
    E.Any +
        = <TrimL <TrimR E.Any>>

* <TrimL E.Any> == E.Any′
TrimL
    S(:White_Spaces:)._ E.Any +
        = <TrimL E.Any>
    E._ = E._

* <TrimR E.Any> == E.Any′
TrimR
    E.Any S(:White_Spaces:)._ +
        = <TrimR E.Any>
    E._ = E._

* <Exist W.Elem E.Sample_Elems> == &True | &False
Exist
    W.Sample E.Items_B W.Sample E.Items_E +
        = &True
    W._ E.__ +
        = &False

* <Set W.Item*> == W.Item*′
Set R E.Items_B W.Repeated E.Items_E W.Repeated E.Uniques +
        = <Set E.Items_B W.Repeated E.Items_E> E.Uniques
    E._ = E._

* <Empty E.Any> ==
Empty
    E._ =

* <Type E.Any> == S.Type E.SubType E.Any
* S.Type ::= &Void | &Label | &Number | &Reference | &Char | &Brackets | &OtherT
* E.SubType ::= &Latin | &Digit |
Type    = &Void
    S(F).Symbol E._ +
        = &Label S.Symbol E._
    S(N).Symbol E._ +
        = &Number S.Symbol E._
    S(R).Symbol E._ +
        = &Reference S.Symbol E._
    S(L).Symbol E._ +
        = &Char &Latin S.Symbol E._
    S(D).Symbol E._ +
        = &Char &Digit S.Symbol E._
    S(O).Symbol E._ +
        = &Char S.Symbol E._
    (E.Expr) E._ +
        = &Brackets (E.Expr) E._
    E._ = &OtherT E._

* <Is_Type S.Type E.Any> == &True | &False
* S.Type ::= &Void | &Label | &Number | &Reference | &Char | &Latin | &Digit |
*            &Brackets | &OtherT
Is_Type
    &Void +
        = &True
    &Void E._ +
        = &False
    &Label S(F).Symbol E._ +
        = &True
    &Label E._ +
        = &False
    &Number S(N).Symbol E._ +
        = &True
    &Number E._ +
        = &False
    &Reference S(R).Symbol E._ +
        = &True
    &Reference E._ +
        = &False
    &Char S(O).Symbol E._ +
        = &True
    &Char E._ +
        = &False
    &Latin S(L).Symbol E._ +
        = &True
    &Latin E._ +
        = &False
    &Digit S(D).Symbol E._ +
        = &True
    &Digit E._ +
        = &False
    &Brackets (E.Expr) E._ +
        = &True
    &Brackets E._ +
        = &False
    &OtherT +
        = &False
    &OtherT S(F).Symbol E._ +
        = &False
    &OtherT S(N).Symbol E._ +
        = &False
    &OtherT S(R).Symbol E._ +
        = &False
    &OtherT S(O).Symbol E._ +
        = &False
    &OtherT (E.Expr) E._ +
        = &False
    &OtherT E._ +
        = &True

    END
