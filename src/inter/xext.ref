* Copyright 2025 Aleksandr Bocharov
* Distributed under the Boost Software License, Version 1.0.
* See accompanying file LICENSE_1_0.txt
* or copy at http://www.boost.org/LICENSE_1_0.txt
* 2025-10-29
* https://github.com/Aleksandr3Bocharov/refalab

*====================================================================
* Рефал-функции библиотеки РефалАБ.
* Спецификаторы библиотеки РефалАБ.
* Пустые функции библиотеки РефалАБ.
*====================================================================

EXT START

    ENTRY Numbers_Files, EOF
    ENTRY Load_File, Save_File, Append_File
    ENTRY Load_FBytes, Save_FBytes, Append_FBytes
    ENTRY Inc, Dec, ArgList
    ENTRY White_Spaces, Is_White_Space, Trim, TrimL, TrimR  
    ENTRY QSort, Min, Max, Exist, Set, Empty, Type, Is_Type
    ENTRY True, False, NULL, Begin, End, Cur
    ENTRY Void, Label, Number, Reference, Latin, Digit, Char, Brackets, OtherT
    ENTRY Max_Number, Get_Max_Number, Is_Max_Number
    EXTRN FoldL
    EXTRN FOpen, FClose, FGetS, FPutS, FRead, FWrite, FEOF, FError 
    EXTRN Add, Sub, P1, Arg, LRel
    EMPTY True, False, NULL, Begin, End, Cur
    EMPTY Void, Label, Number, Reference, Latin, Digit, Char, Brackets, OtherT

Numbers_Files +
    S   0 1 2 3 4 5 6 7 8 9

EOF +
    S   &FEOF &FError

White_Spaces +
    S   ' \n\t\v\f\r'

Max_Number +
    S   4294967295

    IMPL

* <Load_File S(:Numbers_Files:).Handle E(O).FileName> == V.Out
* V.Out ::= V(O).Open_Error &NULL | E.Lines S(:EOF:).EOF E(O).Close_Error
* E.Lines ::= (E(O).Line)*
Load_File
    S.Handle E.FileName +
        = <FOpen 'r' S.Handle E.FileName> +
        <Load_File_Aux S.Handle <FGetS S.Handle>> +
        <FClose S.Handle>

Load_File_Aux
    E._ &NULL +
        =
    S._ S(:EOF:).EOF +
        = S.EOF
    S._ E.Line S(:EOF:).EOF +
        = (E.Line) S.EOF
    S.Handle E.Line +
        = (E.Line) <Load_File_Aux S.Handle <FGetS S.Handle>>

* <Save_File S(:Numbers_Files:).Handle (E(O).FileName) E.Lines> == E.Out
* E.Lines ::= (E(O).Line)*
* E.Out ::= V(O).Open_Error &NULL | E(:EOF:).EOF E(O).Close_Error
Save_File
    S.Handle (E.FileName) E.Lines +
        = <Check_Lines E.Lines> <FOpen 'w' S.Handle E.FileName> +
        <Write_Bracket_Lines S.Handle E.Lines> +
        <FClose S.Handle>

Check_Lines
        =
    (E(O).Line) E.Rest_Lines +
        = <Check_Lines E.Rest_Lines>

Write_Bracket_Lines
    S._ =
    S.Handle (E.Line) E.Rest_Lines +
        = <Write_Bracket_Lines_Aux <FPutS S.Handle E.Line '\n'> S.Handle E.Rest_Lines>

Write_Bracket_Lines_Aux
    &NULL E._ +
        =
    S(:EOF:).EOF E._ +
        = S.EOF
    E._ = <Write_Bracket_Lines E._>

* <Append_File S(:Numbers_Files:).Handle (E(O).FileName) E.Lines> == E.Out
* E.Lines ::= (E(O).Line)*
* E.Out ::= V(O).Open_Error &NULL | E(:EOF:).EOF E(O).Close_Error
Append_File
    S.Handle (E.FileName) E.Lines +
        = <Check_Lines E.Lines> <FOpen 'a' S.Handle E.FileName> +
        <Write_Bracket_Lines S.Handle E.Lines> +
        <FClose S.Handle>

* <Load_FBytes S(:Numbers_Files:).Handle E(O).FileName> == V.Out
* V.Out ::= V(O).Open_Error &NULL | E.Bytes S(:EOF:).EOF E(O).Close_Error
* E.Bytes ::= S(N).Byte*
Load_FBytes
    S.Handle E.FileName +
        = <FOpen 'rb' S.Handle E.FileName> +
        <Load_FBytes_Aux S.Handle <FRead S.Handle 4096>> +
        <FClose S.Handle>
  
Load_FBytes_Aux
    E._ &NULL +
        =
    S._ E.Bytes S(:EOF:).EOF +
        = E.Bytes S.EOF
    S.Handle E.Bytes +
        = E.Bytes <Load_FBytes_Aux S.Handle <FRead S.Handle 4096>>

* <Save_FBytes S(:Numbers_Files:).Handle (E(O).FileName) E.Bytes> == E.Out
* E.Bytes ::= S(ON).Byte*
* E.Out ::= V(O).Open_Error &NULL | E(:EOF:).EOF E(O).Close_Error
Save_FBytes
    S.Handle (E.FileName) E(ON).Bytes +
        = <FOpen 'wb' S.Handle E.FileName> +
        <Write_FBytes <FWrite S.Handle E.Bytes>> +
        <FClose S.Handle>

Write_FBytes
    &NULL +
        =
    E._ = E._

* <Append_FBytes S(:Numbers_Files:).Handle (E(O).FileName) E.Bytes> == E.Out
* E.Bytes ::= S(ON).Byte*
* E.Out ::= V(O).Open_Error &NULL | E(:EOF:).EOF E(O).Close_Error
Append_FBytes
    S.Handle (E.FileName) E(ON).Bytes +
        = <FOpen 'ab' S.Handle E.FileName> +
        <Write_FBytes <FWrite S.Handle E.Bytes>> +
        <FClose S.Handle>

* <Inc E.Number*> == E.Number1
* E.Number ::= '+' S(N).Number+ | '-' S(N).Number+ | S(N).Number*
* E.Number1 ::= '-'? S(N).Number+
Inc
    E.Number +
        = <Add (E.Number) 1>

* <Dec E.Number*> == E.Number1
* E.Number ::= '+' S(N).Number+ | '-' S(N).Number+ | S(N).Number*
* E.Number1 ::= '-'? S(N).Number+
Dec
    E.Number +
        = <Sub (E.Number) 1>

* <ArgList> == (S(O).Arg+)*
ArgList
        = <ArgList_Aux 1>

ArgList_Aux
    S.Next +
        = <SwArgList_Aux <P1 S.Next> <Arg S.Next>>

SwArgList_Aux
    S.Next +
        =
    S.Next E.Arg +
        = (E.Arg) <ArgList_Aux S.Next>

* <Is_White_Space S.Any> == &True | &False
Is_White_Space
    S(:White_Spaces:)._ +
        = &True
    S._ = &False

* <Trim E.Any> == E.Any′
Trim
    E.Any +
        = <TrimL <TrimR E.Any>>

* <TrimL E.Any> == E.Any′
TrimL
    S(:White_Spaces:)._ E.Any +
        = <TrimL E.Any>
    E._ = E._

* <TrimR E.Any> == E.Any′
TrimR
    E.Any S(:White_Spaces:)._ +
        = <TrimR E.Any>
    E._ = E._

* <QSort E.Any> == E.Sort_Any
QSort
        =
    W.Pivot +
        = W.Pivot
    W.Pivot E.Items +
        = <QSort_Aux <FoldL &DoQSort (() (W.Pivot) ()) E.Items>>

QSort_Aux
    ((E.Less) (E.Equal) (E.Greater)) +
        = <QSort E.Less> E.Equal <QSort E.Greater>

DoQSort
    ((E.Less) (W.Pivot E.Equal) (E.Greater)) W.Next +
        = <DoQSort_Aux <LRel (W.Next) W.Pivot> +
            ((E.Less) (W.Pivot E.Equal) (E.Greater)) W.Next>

DoQSort_Aux
    '<' ((E.Less) E._) W.Next +
        = ((E.Less W.Next) E._)
    '=' ((E.Less) (E.Equal) (E.Greater)) W.Next +
        = ((E.Less) (E.Equal W.Next) (E.Greater))
    '>' (E._ (E.Greater)) W.Next +
        = (E._ (E.Greater W.Next))

* <Min W.Min+> == W.Min
Min W.X W.Y +
        = <Min_Aux <LRel (W.X) W.Y> W.X W.Y>
    W.First E.Tail +
        = <FoldL &Min W.First E.Tail>

Min_Aux
    '<' W.X E._ +
        = W.X
    E._ W.Y +
        = W.Y

* <Max W.Max+> == W.Max
Max W.X W.Y +
        = <Max_Aux <LRel (W.X) W.Y> W.X W.Y>
    W.First E.Tail +
        = <FoldL &Max W.First E.Tail>

Max_Aux
    '>' W.X E._ +
        = W.X
    E._ W.Y +
        = W.Y

* <Exist W.Elem E.Sample_Elems> == &True | &False
Exist
    W.Sample E.Items_B W.Sample E.Items_E +
        = &True
    W._ E.__ +
        = &False

* <Set W.Item*> == W.Item*′
Set R E.Items_B W.Repeated E.Items_E W.Repeated E.Uniques +
        = <Set E.Items_B W.Repeated E.Items_E> E.Uniques
    E._ = E._

* <Empty E.Any> ==
Empty
    E._ =

* <Type E.Any> == S.Type E.SubType E.Any
* S.Type ::= &Void | &Label | &Number | &Reference | &Char | &Brackets | &OtherT
* E.SubType ::= &Latin | &Digit |
Type    = &Void
    S(F).Symbol E._ +
        = &Label S.Symbol E._
    S(N).Symbol E._ +
        = &Number S.Symbol E._
    S(R).Symbol E._ +
        = &Reference S.Symbol E._
    S(L).Symbol E._ +
        = &Char &Latin S.Symbol E._
    S(D).Symbol E._ +
        = &Char &Digit S.Symbol E._
    S(O).Symbol E._ +
        = &Char S.Symbol E._
    (E.Expr) E._ +
        = &Brackets (E.Expr) E._
    E._ = &OtherT E._

* <Is_Type S.Type E.Any> == &True | &False
* S.Type ::= &Void | &Label | &Number | &Reference | &Char | &Latin | &Digit |
*            &Brackets | &OtherT
Is_Type
    &Void +
        = &True
    &Void E._ +
        = &False
    &Label S(F).Symbol E._ +
        = &True
    &Label E._ +
        = &False
    &Number S(N).Symbol E._ +
        = &True
    &Number E._ +
        = &False
    &Reference S(R).Symbol E._ +
        = &True
    &Reference E._ +
        = &False
    &Char S(O).Symbol E._ +
        = &True
    &Char E._ +
        = &False
    &Latin S(L).Symbol E._ +
        = &True
    &Latin E._ +
        = &False
    &Digit S(D).Symbol E._ +
        = &True
    &Digit E._ +
        = &False
    &Brackets (E.Expr) E._ +
        = &True
    &Brackets E._ +
        = &False
    &OtherT +
        = &False
    &OtherT S(F).Symbol E._ +
        = &False
    &OtherT S(N).Symbol E._ +
        = &False
    &OtherT S(R).Symbol E._ +
        = &False
    &OtherT S(O).Symbol E._ +
        = &False
    &OtherT (E.Expr) E._ +
        = &False
    &OtherT E._ +
        = &True

* <Get_Max_Number> == 4294967295
Get_Max_Number
        = 4294967295

* <Is_Max_Number S.Any> == &True | &False
Is_Max_Number
    S(:Max_Number:)._ +
        = &True
    S._ = &False

    END
